/*
 * This source file was generated by the Gradle 'init' task
 * */

package com.spectorstudios.lexer;

import com.spectorstudios.tokens.TokenType;
import com.spectorstudios.tokens.Token;

public class Lexer {
  
  private static final char NOTHING = '\0';
  public String input;
  public int position;
  public int readPosition;
  public char ch;

  public Lexer(String input){
    this.input = input;
    position = 0;
    readPosition = 0;
    ch = NOTHING;
    readChar();
  }

  public void readChar(){
    if (this.readPosition >= this.input.length()) {
      this.ch = NOTHING;
    } else {
      this.ch = input.charAt(readPosition);
    }
      this.position = this.readPosition;
      this.readPosition += 1;
  }

  public Token nextToken() {
    skipWhitespace();
    char currCh = this.ch;

    Token tok;

    switch (ch) {
      case '=':
        if (peekAhead() == '=') {
          this.readChar();
          String literal = "" + currCh + this.ch;
          tok = new Token(TokenType.EQ, literal);
        } else {
          tok = new Token(TokenType.ASSIGN, "=");
        }
        break;

      case '+':
        tok = new Token(TokenType.PLUS, "+");
        break;
      case '-':
        tok = new Token(TokenType.MINUS, "-");
        break;
      case '*':
        tok = new Token(TokenType.ASTERISK, "*");
        break;
      case '/':
        tok = new Token(TokenType.SLASH, "/");
        break;

      case '!':
        if (peekAhead() == '=') {
          readChar();
          String literal = "" + currCh + this.ch;
          tok = new Token(TokenType.NOT_EQ, literal);
        } else {
          tok = new Token(TokenType.BANG, "!");
        }
        break;

      case '<':
        tok = new Token(TokenType.LT, "<");
        break;
      case '>':
        tok = new Token(TokenType.GT, ">");
        break;
      

      case ',':
        tok = new Token(TokenType.COMMA, ",");
        break;
      case ';':
        tok = new Token(TokenType.SEMICOLON, ";");
        break;

      case '(':
        tok = new Token(TokenType.LPAREN, "(");
        break;
      case ')':
        tok = new Token(TokenType.RPAREN, ")");
        break;

      case '{':
        tok = new Token(TokenType.LBRACE, "{");
        break;
      case '}':
        tok = new Token(TokenType.RBRACE, "}");
        break;
      case NOTHING:
        tok = new Token(TokenType.EOF, "");
        break;


      default:
        if (isLetter(ch)) {
          String identifier = readIndentifier();
          TokenType type = Token.lookUpIdentifier(identifier);
          tok = new Token(type, identifier);

          return tok;
        } else if (isDigit(ch)) {
          String number = readNumber();
          tok = new Token(TokenType.INT, number);
          
          return tok;
        } else {
          tok = new Token(TokenType.ILLEGAL, "" + ch);
        }
    }

    this.readChar();
    return tok;

  }

  private boolean isLetter(char ch) {
    return ('a' <= ch && ch <= 'z') || ('A' <= ch && ch <= 'Z') || ch == '_';
  }

  private boolean isDigit(char ch) {
    return '0' <= ch && ch <= '9';
  }

  private String readIndentifier() {
    int startPosition = position;

    while(isLetter(ch)) {
      readChar();
    }

    return input.substring(startPosition, position);
  }

  private String readNumber() {
    int startPosition = position;

    while(isDigit(ch)) {
      readChar();
    }

    return input.substring(startPosition, position);
  }

  private void skipWhitespace() {
    while (ch == ' ' || ch == '\t' || ch == '\r' || ch == '\n') {
      readChar();
    }
  }

  private char peekAhead() {
    if (this.readPosition >= input.length()) {
      return NOTHING;
    }
    
    return input.charAt(readPosition);
  }
}
